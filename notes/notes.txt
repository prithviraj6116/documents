set primary window: xrandr --output VNC-1 --primary --right-of VNC-0
cat /etc/os-release
cat /proc/version
cat /etc/debian-version
dpkg -S `which ld`
cat /proc/cpuinfo
gcc -Xlinker -rpath=/local-ssd/ppatil/installs/glibc1/ -Xlinker -I/local-ssd/ppatil/installs/glibc1/elf/ ../pppGitHub/c1.c  -o c1


advanates of little endian: 
1. casts are noop since address of 1(char),2(short/half),4(int/float/word),8(longint/double/doubleword/size/addr) byte int would be same
2. for 8 bit systems or for big integers/big integers: addition and subtraction can be pipelined or parallelized since lsb needs to
perform addition/subtraction before msb

load_elf_binary: linux calls to load elf binaries

ld is static linker, ld.so is loader and dynamic linker: 
https://unix.stackexchange.com/questions/438068/what-is-the-difference-between-the-runtime-linker-ld-so-and-the-prelink-progra


_dl_start_user: to debug ld.so 
https://sourceware.org/glibc/wiki/Debugging/Loader_Debugging#Debugging_With_an_Alternate_Loader
rpath vs -L : gcc : 
cat /etc/cpuinfo: https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/arch/x86/include/asm/cpufeatures.h

https://www.microcontrollertips.com/difference-between-von-neumann-and-harvard-architectures/

alignment:https://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/ 
std::has_unique_object_representation
alignas
std::alignment_of
__attribute__((packed))


standardlayout object
p4 sync -N ...
info vtbl variable
sb -nosplash -nodesktop -r "sfnew;bdclose all"

exception handling: LSDA, CFI, personality function, unwind.h, setjmp, longjmp,
goto
-fPIC vs load time relocation
static library vs shared library. 
shared library can be statically linked (-fPIC) vs dynamic linked (load time relocation)
dynamically loaded
disadvantate of dynamicalled linked shared library:https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/
https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/
1. non-sharable text section, ram usage increase since each exe that loads
library needs separate copy 2. text section needs writable, security 3. load time increases

can we relink shared library online?
.got: global offset table
.bss: block started by symbol
plt: procedure location table
https://reverseengineering.stackexchange.com/questions/1992/what-is-plt-got


info proc mapping
info sharedlibrary
https://reverseengineering.stackexchange.com/questions/6657/why-does-ldd-and-gdb-info-sharedlibrary-show-a-different-library-base-addr


cpsr: control pgogram status register
pc: program counter
sp: stack pointer
bp: base pointer
gpio: general purpose io
uart: universal asynchronous receiver trasmitter
isr: interrupt service routine
mmu: memory management unit i2c, spi: serial peripheral interface i2c: inter integrated circuit
echo $XDG_CURRENT_DESKTOP: debian current desktop  mate,kde,xfce,gnome,
man hier : show linux file folder root hierarchy
FHS: Filesystem Hierarchy Standard
web server interfaces: cgi: common gateway interface :mod_php, java servlets, python WSGI, ruby rack
sbin: superuser bin files
/opt vs /usr/local

https://www.debian.org/doc/manuals/debian-faq/pkgtools.en.html: apt install;apt
install;apt show;apt list --upgradable; apt list packagename; apt list; apt show
packagename; dpkg --search xxx;dpkg --listfiles packagename

find -L / -samefile path/to/foo.txt

get macros:g++ -dM -E -x c++ /dev/null 
libc dietlibc uclibc eglibc musl


custom libc with gcc
export env1=/opt/musl1;export lib1=$env1/lib;export include1=$env1/include;gcc -g -o c1 -nostdlib c1.c -I $include1 -L $lib1  -Xlinker $lib1/crt1.o -Xlinker $lib1/crti.o -lc  -Xlinker -rpath=$lib1 -Xlinker -I $lib1/ld-musl-x86_64.so.1 -Xlinker $lib1/crtn.o

custom libc with g++
export env1=/opt/mylibc1;export lib1=$env1/lib;export include1=$env1/include;g++  -nostdlib  -I $include1 -L $lib1  -Xlinker $lib1/crt1.o -Xlinker $lib1/crti.o   /usr/lib/gcc/x86_64-linux-gnu/8/crtbeginS.o -lstdc++ -lc  /usr/lib/gcc/x86_64-linux-gnu/8/crtendS.o -Xlinker -rpath=$lib1 -Xlinker -I $lib1/myld.so -Xlinker $lib1/crtn.o -nostdlib -o cpp1 cpp1.cpp


crt1.o crti.o crtn.o:https://wiki.osdev.org/Creating_a_C_Library 

fpie fpic :https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld 

return oriented programming attacks:https://en.wikipedia.org/wiki/Return-oriented_programming 

compression: xz, lzma, gzip, bzip2 https://unix.stackexchange.com/questions/108100/why-are-tar-archive-formats-switching-to-xz-compression-to-replace-bzip2-and-wha

tar -xf or tar -xjf (bzip2)
linux package: bc: arbitrary precision calculator, xz-utils: compression,
