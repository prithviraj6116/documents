execution domains (export function, discrete, continuous/hybrid)
Stateflow limitations on continuous, SL functions, SL states,

all config set options: matlab/toolbox/shared/configset/src/configset_base/checksum/type/

set_param(0, 'GlobalUseClassicAccelMode', 'on');
%     set_param(0, 'AcceleratorUseTrueIdentifier','on');
%     set_param(0, 'GlobalUseClassicAccelMode', 'on');
%     slfeature('FMUBlockRaccelReval',1);
%     slfeature('UseSimulationServiceForRaccel',0);
%     slfeature('MLSysBlockRaccelReval',1);
 
sfc('coder_options')

  %v=sf('find',sf('FunctionsIn',sf('get',sf('GetSFBlockData',gcbh),'instance.chart')),'state.name','mlfcn1')
    %v=sf('find',sf('SubstatesIn',sf('get',sf('GetSFBlockData',gcbh),'instance.chart')),'state.name','stateA')
    %v=sf('get',sf('find',sf('SubstatesIn',sf('get',sf('GetSFBlockData',gcbh),'instance.chart')),'state.name','A'),'state.simulink.blockHandle')
    %sf('get',sf('GetSFBlockData',get_param(get_param(gcbh,'ReferenceBlock'),'handle')),'instance.chart')
    %getappdata(get_param(sf('get',sf('GetSFBlockData',get_param(get_param(gcbh,'ReferenceBlock'),'handle')),'instance.sfunctionBlock'),'Object'),'SF_InstanceSpecChecksum')
sbsmartbuild -opened; mw runlikebat does not work


c style comments: //
-Wimplicit-int
int main()


C89  keywords: 32
built-in types(6)         : void, char, int, float, double, enum
aggreate types(2)         : struct, union   
type modifiers(4)         : signed, unsigned, short, long
storage specifier(4)      : auto, register, static, extern
cv qualifier(2)           : const, volatile 
conditional statements(5) : if, else, switch, case, default
loops(3)                  : for, do, while
jump statements(4)        : break, continue, goto, return
misc(2)                   : typedef, sizeof
C99 keywords: 5
_Bool, _Complex,_Imaginary, restrict, inline

C Scopes: file scope, block scope, function parameter scope, function scope
Non-structured: FORTRAN, BASIC, COBOL
Structured    : Ada, Pascal, C   : goto prohibited or not supported
ANSI: American National Standards Instrutute
ISO: International Standards Organization

B Ken Thomspson -> C Dennis Ritchie

C Not strongly typed: no run time checking for arguments matching parameter types, implicit type conversion







bhagavad gita: 

tukaram:  https://www.youtube.com/playlist?list=PLPiSaErUa7PcGPe9xQ7pOWEyM6mlfKdbi 
dasbodh: https://www.youtube.com/playlist?list=PLc1r4Cpf66cCRmkHK7YsE7ZZK2Q3xjE0C

gurucharitra: https://www.youtube.com/playlist?list=PL_6xj9qo5MfasqnCUaWDpqbadG60I4Xrw 
ramdaskatha: https://www.youtube.com/playlist?list=PL_6xj9qo5Mfb-Wk6zaB9ITrkjsNJnumcY
navanathsar:  https://www.youtube.com/playlist?list=PL_6xj9qo5MfaF1Yk8PVnOLKEIwGco8B11  
dhyaneshwari: https://www.youtube.com/playlist?list=PL_6xj9qo5MfZ6_sAidq6Svg5-MyjjfjXV  
manache shlok:  https://www.youtube.com/playlist?list=PLRlSTUDyrQYi2-WN7hWatTwlst6BW3Dgp
                https://www.youtube.com/playlist?list=PLAUy5gvjzw_941zCER5wQ1UWczqqqCsoF


youtube audio playlist downloader: yt-dlp --extract-audio --playlist-start 1 --rm-cache-dir --audio-format mp3 -o "das-%(playlist_index)s.%(ext)s" <youtube-playlist-link>

sbindent: https://web.microsoftstream.com/video/f99a8bd4-1530-4146-a6f1-afbe76db59ba
dangling if 

#bii sandbox
https://inside.mathworks.com/wiki/Component_BII_Sandboxes
mw -using Bstateflow printenv | grep COMPONENTS_TO_BUILD
mkdir biisbdir;cd biisbdir;
echo "MW_CLUSTER=Bstateflow" > mw_anchor;echo "P4CLIENT=ppatil.mybii1" > .perforce; echo "P4PORT=p4anycast.mathworks.com:1666" >> .perforce; echo "ENV Bstateflow" > battree
mw -using Bstateflow gmake -f //mathworks/hub/share/apps/iat/tools/sc/R2020a/4605547/glnxa64/thin_snap.mk COMPONENTS_TO_BUILD="stateflow_resources" BUY_ARCHLIST="glnxa64" P4_CLIENT="ppatil.mybii1" create_sandbox
cd matlab;
sbmake CTB=stateflow_resources;


runtests with parameters:
runtests("t_sl_trackerGNNRetrodiction[ScenarioParameters=EKF]/checkRapidAcceleratorAgainstNormal")
edg parser components:
CTB="shared_cxxfe_parser_mi shared_cxxfe_parser_mi shared_cxxfe_ast shared_cxxfe_instrum shared_cxxfe_instrum shared_cxxfe_instrum shared_cxxfe_instrum shared_cxxfe_ast_annotations shared_cxxfe_instrum_mi shared_cxxfe_instrum_mi shared_cxxfe_parser shared_cxxfe_il2ast shared_cxxfe_il2ast shared_cxxfe_il2ast shared_cxxfe_ast2cgir shared_cxxfe_ast2cgir shared_cxxfe_ast2cgir shared_cxxfe_il2cgir shared_cxxfe_il2cgir shared_cxxfe_il2cgir shared_cxxfe_cgir"



MLFcn   :  stops every, hoverStoped(StoppedI1ShowI1OnI1-I1OnI2-I1OnCh,StoppedI2ShowI2OnI1-I2OnI2-I2OnCh), openEditorInstanceButPathAlwaysI1, BP I1I2Ch SyncYes
MLFBlock:  stops every, hoverStoped(StoppedI1ShowI1OnI1-I1OnI2-I1OnCh,StoppedI2ShowI2OnI1-I2OnI2-I2OnCh), openEditorInstanceButPathAlwaysI1, hoverPaused(I1No,I2No,CNo), BP I1I2Ch SyncYes,
TTFcn   :  stops every, hoverStopped(StoppedI1ShowI1OnCh, StoppedI2ShowI2OnCh), openEditorOpensChart, BP I1I2Ch SyncNo,
TTBlock :  stops every, hoverStoped(StoppedI1ShowI1OnI1-I1OnI2-I1OnCh,StoppedI2ShowI2OnI1-I2OnI2-I2OnCh), openEditorOpensChart, hoverPaused(I1No,I2No,CI1) , BP I1I2Ch SyncNo, 


simulink  configuration parameters->data import/export: tout:always array, logsout(signal logging),dsmout: always dataset
                                    xout, yout, xFinal: can be array/struct/dataset
                                                        array: same type, built-in
                                                        struct: built-in
                                                        dataset: any
                                                        
SDI:
1. logsout and dsmout always go to SDI: logsout(signal logging) goes to signal/Statelfow, dsmout goes to state
2. xout, yout: go to SDI if dataset. if struct/array, it goes to SDI if "RecordLoggedWorkspacedataInSDI"==true
3. types: 
   1. Outport(yout), 
   2. States(xout), 
   3. Stateflow(state with LogSelfActivity or ActiveStateData/NormalData with LogData), 
   4. Signal(logsout except those for Stateflow)
   5. DSM(dsmout)

 subchartM3I = StateflowDI.SFDomain.id2DiagramElement(objectId);
openState = StateflowDI.SubchartOpenRequest(subchartM3I, 'REUSE_TAB');
studioApp = SLM3I.SLDomain.getLastActiveStudioAppFor(get_param(obj.topModelName,'handle'));
activeEditor = studioApp.getActiveEditor;
w = StateflowDI.HierarchyServiceUtils.getHIDWithParent(objectId, activeEditor.getHierarchyId);
studioApp.processOpenRequest(openState,w);
function studioUtils(i)
    studioTag='Studio16'; 
    studio = DAS.Studio.getStudio(studioTag);
%     studioTag=studio.getAllStudios{i}.getStudioTag()
%     studio = DAS.Studio.getStudio(studioTag);
    activeEditor=studio.App.getActiveEditor;
    hId = activeEditor.getHierarchyId;
    currentTab = studio.getTabComponents{studio.getCurrentTab};
    studio.getTabTitle(studio.getCurrentTab);
    studio.getStudioTitle;
    disp(GLUE2.HierarchyService.getPaths(hId));

end

stack decoder online tool : http://www-sbtools-ah.mathworks.com/hub/share/sbtools/apps/stack_trace/index.cgi/stacktrace  
abca           



CTB="eml_inference sl_graphical_classes sl_engine_classes sl_main fixedpoint_core sl_compile shared_cgxe foundation/matrix cgir_vm_rt cgir_vm_core shared_simulink_lang_blocks sl_utility sl_compile sl_services sl_graphical_classes sl_loadsave shared_cgxe"



simulink functions in SF:
MAL: requires input S/T/C specified. hence during propagation STC of callsite are verified with SLport STC.
    Propagation:  SLFuncIn->SlFuncOut->CallSiteOut   SLFunctionIn==CallSiteIn SLFunctionOut==CallSiteOut
CAL: can let input S/T/C inherit but callsite does not propagate S/T/C to input parameter. so S/T/C set in SL at propagation. And during codegene callsite and SLport STC are verfied
     Propagation: SLFuncIn->SlFuncOut         CG: SLFunctionIn==CallSiteIn SLFunctionOut==CallSiteOut


For Simulink states in SF:
MAL/CAL: chart inputs and outputs can be used as ports. ports can be have S/T/C inherited or explicit but need to match S/T/C to corresponding chart input/output
MAL/CAL propagation for inputs: SLIn->mainIn->SLStateIn->SLStateOut->mainOut->SLOut->backPropagationA

Back propagaiton trick: 
Add SLState with outChart1->inChart1. 
For ML chart you also need to write "ex:outChart1=inChart1" on one of the states.

Atomic Subchart Mapping: 
input:slIn->mainIn->subchartIn->back
output:mainOut->subchartOut->mainOut->slOut->back
MAL: mapped main chart output and local data must have STC specified
CAL: mapped main chart output and local data must have STC specified. Only exception is if main output is mapped to subchart output then main output can be left inherited. In this case, back propagation might set types

MAL: O be written, L (if used in chart) be written
CAL: O/L are auto-written to 0s

MAL: L if IV exists, no error
MAL: L if no IV and no write in chart, we get error compile-time FULL_ASSIGNMENT_REQUIRED_ERROR
MAL: L if no IV but written in chart but used before write, then runtime error READ_BEFORE_WRITE_ERROR


MAL: IV is not vectorized as per Size
CAL: IV is i   vectorized as per Size



MAL: Size is     inferred from IV
CAL: Size is NOT inferred from IV

stateflow data:
Property Inspector
Name, Port, Size, Type, InitialValue, FirstIndex 
(LoggingSection) LogSignalData(UseSignalName, LimitDataPointToLast, Decimation), TestPoint,  
(AdvancedSection) VariableSize, ResolveToSignalObject, InitialValueFromWorkspace, LockFixedPointTools, 
           TUnable, 
           Unit, Complexity, Range


M Chart: FI 
C Chart: TU

Input Scope: IV, LS, RTSO, IVFW, TU
Local Scope: P, VS, TU, U
Parameter Scope: P, IV, LS, VS, RTSO, IVFW, U, R
DSM Scope: all but S
Constant Scope:  P, LS, VS, RTSO, IVFW, TU, U, C, R

Built-in numeric except boolean:
Boolean: C
FixedPoint: same as "Built-in numeric except boolean"
Enumeration: U, C, R
Bus: IV, IVFW, U, C, R
String: S, FI, VS, LFPT, U, C, R

P: I/O
U,R: I/L/O built-in
C: I/O/P non-boolean-built-in
VS: M charts and M based functions in C chart. non-string. for buses and for param it is ignored.
TU: P in M
IV,IVFW: L/O non-bus
LS: L/O
RTSO: L/O 


mouse cursor : sudo update-alternatives --config x-cursor-theme


sbmake -distcc DEBUG=1 CTB="shared_cgxe foundation/matrix cgir_vm_rt cgir_vm_core shared_simulink_lang_blocks sl_utility sl_compile sl_services sl_graphical_classes sl_loadsave sl_main"

simulink compiler:toolbox/coder/simulinkcoder_core/+coder/+internal/ModelBuilder.m  at line number 723 all the raccel files are generated and begins to build
custom code building:/local-ssd/ppatil/coverage4/matlab/toolbox/shared/cgxe/cgxe/private/createCustomCodeDLL.m : 72
stateflow code generation: private/code_chart_source_file.m and /local-ssd/ppatil/coverage4/matlab/toolbox/stateflow/stateflow/private/targetman.m : 429
jit:serializeJITEngine 
https://inside.mathworks.com/wiki/Generating_C%2B%2B_Source-To-Test_Mapping


mingw vs cygwin: cygwin is compatibility layer to port linux application source code to build on windows by replacing linux syscalls to windows OS calls. mingw is gnu port for windows. it may not have full compatibility with linux gnu.
c/c++: main function 2 signature int main() and int main(int argc, char* argv[], char* environmentVariables[]), third argument is implementation depenedent.

matlab online :  matlab.internal.webgui
get_param(0, 'AcceleratorUseTrueIdentifier')
get_param(gcbh,'OutputFunctionCall')
set_param(0,'globalAccelVerboseBuild','on')
simulink: algebric loop, variable sized signals, zero crossing, minor step updates,

qemu-system-x86_64 -kernel /boot/vmlinuz-4.19.0-14-amd64 -no-kvm -nographic -m 2049M -initrd /boot/initrd.img-4.19.0-14-amd64 -hda /local-ssd/ppatil/gitRepo1/buildroot/output/images/rootfs.ext4  -append "console=ttyS0 root=/dev/sda rw"


/local-ssd/ppatil/installs/llvm1build/bin/llc -filetype=obj cpp1.ll -o cpp1.o  -O3 --debug-pass=Executions
/local-ssd/ppatil/installs/llvm1build/bin/clang++   cpp1.cpp  -g -O3 -o cpp1_1.exe -mllvm --debug-pass=Executions


clang -emit-llvm -o cpp1.ll cpp1.cpp
clang -emit-llvm -S cpp1.bc cpp1.cpp
llvm-as -o cpp1.bc  cpp1.ll
lli cpp1.ll(bc)
llc -filetype=obj -o cpp1.o cpp1.bc(ll)
llc -filetype=asm(default) -o cpp1.s cpp1.bc(ll)

ld.lld --hash-style=both --eh-frame-hdr -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o cpp1.exe /lib/x86_64-linux-gnu/crt1.o /lib/x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/8/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/8 -L/usr/lib/gcc/x86_64-linux-gnu/8/../../../../lib64 -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib64 -L/local-ssd/ppatil/installs/llvm1build/bin/../lib -L/lib -L/usr/lib cpp1.bc-llc.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-linux-gnu/8/crtend.o /lib/x86_64-linux-gnu/crtn.o  --lto-O3


LD_PRELOAD:
http://www.goldsborough.me/c/low-level/kernel/2016/08/29/16-48-53-the_-ld_preload-_trick/#:~:text=Outro-,Introduction,shared%20library%20before%20other%20libraries.

/local-ssd/ppatil/installs/llvm1build/bin/clang++  -E/S/c  cpp1.cpp  -o cpp1 -Xclang -ast-view/-ast-dump/-emit-llvm
hardinfo : hardware info
lscpu

cat /sys/devices/system/cpu/cpu0/cache/index0/size 
cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size
index0: Level1Data 
index1: Level1Instruction 
index2: Level2 
index3: Level3
getconf LEVEL3_CACHE_LINESIZE
lscpu
getconf -a

sram: https://www.youtube.com/watch?v=mwNqzc1o5zM&ab_channel=UdacityUdacity
sram: transi
atx motherboard:

pci/pcie/agp/isa slots: exansion slots
ssl(143) vs ssh(22): secure socket layer, transport layer security, secure shell
public key infrastructure(PKI), digital certificates,
clang  -Xclang -ast-view c1.c
clang -Xclang -ast-dump  c1.c
cross compilation:https://www6.software.ibm.com/developerworks/education/l-cross/l-cross-ltr.pdf 
chip manufactures: intel vs amd
computer manufactures: apple, dell, hp, ibm, asus, lenova, samsung
software: microsoft, google, 
amd: advanced micro chips
compile with custom libc
 export env1=/opt/mylibc1;export lib1=$env1/lib;export include1=$env1/include;gcc -nostartfiles -I $include1 -L $lib1  $lib1/crt1.o $lib1/crti.o /usr/lib/gcc/x86_64-linux-gnu/8/crtbeginS.o /usr/lib/gcc/x86_64-linux-gnu/8/crtendS.o $lib1/crtn.o -Wl,-rpath=$lib1,-I$lib1/myld.so -lstdc++ -g  -o out1 c1.c(pp)

 export env1=/opt/musl1;export lib1=$env1/lib;export include1=$env1/include;gcc -nostartfiles -I $include1 -L $lib1  $lib1/crt1.o $lib1/crti.o /usr/lib/gcc/x86_64-linux-gnu/8/crtbeginS.o /usr/lib/gcc/x86_64-linux-gnu/8/crtendS.o $lib1/crtn.o -Wl,-rpath=$lib1,-I$lib1/myld.so -lstdc++ -g  -o out1 c1.c(nocpp)

python compiler: nitka, brython
stackless python
IIFE: immediately invokded function expression
linux set primary window or display in multi display systems: xrandr --output VNC-1 --primary --right-of VNC-0
cat /etc/os-release
cat /proc/version
cat /etc/debian-version
dpkg -S `which ld`
cat /proc/cpuinfo
gcc -Xlinker -rpath=/local-ssd/ppatil/installs/glibc1/ -Xlinker -I/local-ssd/ppatil/installs/glibc1/elf/ ../pppGitHub/c1.c  -o c1


advanates of little endian: 
1. casts are noop since address of 1(char),2(short/half),4(int/float/word),8(longint/double/doubleword/size/addr) byte int would be same
2. for 8 bit systems or for big integers/big integers: addition and subtraction can be pipelined or parallelized since lsb needs to
perform addition/subtraction before msb

load_elf_binary: linux calls to load elf binaries

ld is static linker, ld.so is loader and dynamic linker: 
https://unix.stackexchange.com/questions/438068/what-is-the-difference-between-the-runtime-linker-ld-so-and-the-prelink-progra


_dl_start_user: to debug ld.so 
https://sourceware.org/glibc/wiki/Debugging/Loader_Debugging#Debugging_With_an_Alternate_Loader
rpath vs -L : gcc : 
cat /etc/cpuinfo: https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/arch/x86/include/asm/cpufeatures.h

https://www.microcontrollertips.com/difference-between-von-neumann-and-harvard-architectures/

alignment:https://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/ 
std::has_unique_object_representation
alignas
std::alignment_of
__attribute__((packed))


standardlayout object
p4 sync -N ...
info vtbl variable
sb -nosplash -nodesktop -r "sfnew;bdclose all"

exception handling: LSDA, CFI, personality function, unwind.h, setjmp, longjmp,
goto
-fPIC vs load time relocation
static library vs shared library. 
shared library can be statically linked (-fPIC) vs dynamic linked (load time relocation)
dynamically loaded
disadvantate of dynamicalled linked shared library:https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/
https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/
1. non-sharable text section, ram usage increase since each exe that loads
library needs separate copy 2. text section needs writable, security 3. load time increases

can we relink shared library online?
.got: global offset table
.bss: block started by symbol
plt: procedure location table
https://reverseengineering.stackexchange.com/questions/1992/what-is-plt-got


info proc mapping
info sharedlibrary
https://reverseengineering.stackexchange.com/questions/6657/why-does-ldd-and-gdb-info-sharedlibrary-show-a-different-library-base-addr


cpsr: control pgogram status register
pc: program counter
sp: stack pointer
bp: base pointer
gpio: general purpose io
uart: universal asynchronous receiver trasmitter
isr: interrupt service routine
mmu: memory management unit i2c, spi: serial peripheral interface i2c: inter integrated circuit
echo $XDG_CURRENT_DESKTOP: debian current desktop  mate,kde,xfce,gnome,
man hier : show linux file folder root hierarchy
FHS: Filesystem Hierarchy Standard
web server interfaces: cgi: common gateway interface :mod_php, java servlets, python WSGI, ruby rack
sbin: superuser bin files
/opt vs /usr/local

https://www.debian.org/doc/manuals/debian-faq/pkgtools.en.html: apt install;apt
install;apt show;apt list --upgradable; apt list packagename; apt list; apt show
packagename; dpkg --search xxx;dpkg --listfiles packagename

find -L / -samefile path/to/foo.txt

get macros:g++ -dM -E -x c++ /dev/null 
libc dietlibc uclibc eglibc musl


custom libc with gcc
export env1=/opt/musl1;export lib1=$env1/lib;export include1=$env1/include;gcc -g -o c1 -nostdlib c1.c -I $include1 -L $lib1  -Xlinker $lib1/crt1.o -Xlinker $lib1/crti.o -lc  -Xlinker -rpath=$lib1 -Xlinker -I $lib1/ld-musl-x86_64.so.1 -Xlinker $lib1/crtn.o 
custom libc with g++
export env1=/opt/mylibc1;export lib1=$env1/lib;export include1=$env1/include;g++  -nostdlib  -I $include1 -L $lib1  -Xlinker $lib1/crt1.o -Xlinker $lib1/crti.o   /usr/lib/gcc/x86_64-linux-gnu/8/crtbeginS.o -lstdc++ -lc  /usr/lib/gcc/x86_64-linux-gnu/8/crtendS.o -Xlinker -rpath=$lib1 -Xlinker -I $lib1/myld.so -Xlinker $lib1/crtn.o -nostdlib -o cpp1 cpp1.cpp


crt1.o crti.o crtn.o:https://wiki.osdev.org/Creating_a_C_Library 

fpie fpic :https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld 

return oriented programming attacks:https://en.wikipedia.org/wiki/Return-oriented_programming 

compression: xz, lzma, gzip, bzip2 https://unix.stackexchange.com/questions/108100/why-are-tar-archive-formats-switching-to-xz-compression-to-replace-bzip2-and-wha

tar -xf or tar -xjf (bzip2)
linux package: bc: arbitrary precision calculator, xz-utils: compression,











matlab/src/sl_graphical_classes/export/include/sl_graphical_classes/RegisterModelParameters.hpp
allslfeature=slf_feature('report');
slflist= slfeature('query','stateflow');
mw runlikebat -testlist test/toolbox/stateflow/sf_in_matlab/bug_fixes/tg1879530_BPonCommentedTransition.m -interactive -logs /tmp/asvs
get_param(blockPathOrModel,'ObjectParameters');
get_param(blockPathOrModel,'DialogParameters');
get_param(0, 'CurrentSystem');

get_param(blockH, 'parent') vs getfullname(blockH)
get_param(blockH, 'ReferenceBlock')

getSimulinkBlockHandle(blockPath) vs get_param(blockPath, 'handle')
TTT: mainmodel->lib1(notopened)->lib2(opened,breakpoint)
chartInstance = sf('GetSFBlockData', SFblockH);  
TTT: rtwOptimizationInfo g1290447 how is it used in rtw and rapidaccel
TTT:prs_overide_data_type can be short-circuited based on fixptOverride
cdr_data_set_props_with_resolve_type: can be better written  like below
 if (S==nullptr)                  {resolve_type;errorOnFailure;return;}
 resoveBuiltIns{cdr_data_type_from_name_no_default, returnOnSuccess;}
 if (typeStr startsWith 'fixdt(') {cdr_evaluate_expression(slResolve); returnOnSuccess;}
 resolveExpression{cdr_data_set_props_from_sl_type(ssRegisterTypeFromExprNoError);}
 errorOrFailure;
 %note: there is not much difference between slResolve and ssRegisterTypeFromExprNoError

fixdt: unspecified scaling(fixdt(1,16) or best precision(based on min/max): SL supports except for bus fields, SF does not support 

we could replace:MAKE_USTRINGSTREAM(sizeBufStream) with auto sizeBufStream = fl::io::make_ustringstream();
validatedvector could use copyconstructor/init method taking std::vector<T>
what happens when P1 (param) data size in SF is set using P1 itself (works)
obsolete features: SF_NEW_SIZE_METHOD BUS_ARRAYS

https://inside.mathworks.com/wiki/Category:Native_Memory_Diagnostics  memmgr feature('memmgr')

GDB ptype
GDB whatis


sf('get',dataId,'data.parsedInfo.type.base') is stale even after compile, 
to refresh above, c=sf('IdToHandle,dataId);c.parsedInfo.type.base;
accessing mcos/udd data copies data->getParsedInfo() to data->parsedInfo

q1_findCoverage: do we need do parse0 to find out if we are using temporal operators
q1_findCoverage:  // Process inherited types (may use registered bus types)

prs_set_flags_from_data_properties: complexity seems different than size/type

sfunction input: (0) data (port) (1) atomic subchart data(l->o) (2) sl function data (3) events (port)
sfunction output: (0) demux (1) data(port) (2) Trigger event(port) (3) atomic subchart Trigger event (4) atomic subchart data(l->i,o->i) (5) slfunction data
demux output: (0) function call event(port) (2) atomic subchart fcn event (3) SL function Fcn Call

CAL parameter data tunable: grayed out, but can be enabled/disabled via command line: if enabled: sim: regenerates code when value changes but CG: works correctly
CAL l/o data with initfromworkspace: sim: works i.e. does not regenerates code when param value changes in workspace

set_inherited_data_properties_into_chart_io_data does not belong to propagate_info_to_atomic_subchart_io

set breakpoints in mdl* methods in stateflow_mdl_methods.stubs and  enable: debugbuild and nonjit
for jit, some of mdl* methods in sf_sfun.cpp are called at runtime.

for inherited inputs, mdlPropagationPass(dimensions) is called twice.

Simulink.importExternalCTypes

continuous charts generate seperate outputs functions even though it never is used.

continuous charts do not serialize jit engine. hence closing and opening model with continuous chart regenerates code

registerSimulinkFunctionsCalledByChart has some unnecessary code in for loop

model params: TargetStyle, SimulationMode, RapidAcceleratorSimStatus, ModelReferenceTargetType, SimulationStatus, 

curiousbly recurring template pattern
type erasure: boost::any_range

v=feature('diagnosticSpec','sf::cdr.*=all');
v=feature('diagnosticDest','file=mylogfile.txt');
http://inside-files.mathworks.com/dev/ltc/doxygen/Bfl/html/user_view/foundation/log/src/log/
Foundation logger/mwlogger uses Boost.log
https://www.boost.org/doc/libs/1_59_0/libs/log/doc/html/index.html


http://inside.mathworks.com/wiki/OUT_OF_MODEL.mk

https://stackoverflow.com/questions/210835/what-is-referential-transparency
vim: :e->reload, :e!->reload+discardLocalChanges

c++ exception safety guarantee

record_SF_known_struct_types_recursively : not required
 StdCdrEmlApi::setCdrModuleInfo: has if branch which should be in the caller

fDataCGTypeMap is not allocated on dummyCdrModuleInfo during propagation which means, during propatation cgtype are not reused.

cdr_cg_struct_or_enum_type_from_data : how does hdl/clientserver work for two isntances of library chart with different input struct type. since simstruct is not available, we just rely on data->parsedInfo which is not instance specific

getSSIDFromObjectId chart_is_eml can be used instead in first if

chart.eml.f2fConfig when does it get set in cdr_eml_infer_chart

MAL chart output variable size data(size=n) initial values have to match size of data(n). for CAL, it can be of of size 1-n

MAL variable-size: supported. dynamic memory can be specified for ml-function-locals but not required
CAL variable-size: only accessed in MLFcn/TTMLFcn/SLFcn. also dynamic memory is required for code-gen

MAL unbounded: supported. featured off. not sure about codegen supported(?)
CAL unbounded: not supported.

MAL symbolic size: not supported
CAL symbolic size: supported, but not-supported if data is var-size

cdr_eml_infer_chart: do we need cdrModuleInfo->createSymbols() here;

cdr_nodedef::getInputType : not clear why known type is marked as double

std::reference_wrapper motivation: https://www.nextptr.com/tutorial/ta1441164581/stdref-and-stdreference_wrapper-common-use-cases
std::vector<std::reference_wrapper<int>>
not allowed:std::vector<const int>,std::vector<int&> as T in std::vector<T> requires assignable
std::get retruns reference_wrapper. reference_wrapper can returns T& with get()
auto i = 1;auto r = std::ref(i); r.get()=12;

std::conditional_t

inherited class method with same name but different prototype hides(not override) the base method.

expr: [1,2]: eml after parse_function: #matrix(#vcat($1,$2) what is type of #matrix here

during propagation size inference, if any input type is not known, we set all inputs(except bus) to be real. input type of bus is always known before size pass. it happens during after mdlInitializeSizes
above process happens for complexity also. during size prop-inference, if we don't know any input complexity, we set all input to be real. bus/enum/string don't have compexity.

in cdr_update_types_against_inference_results, after propagation inference, we only throw errors if output t/s/c is inferred, unambiguous, have user specified value and mismatch with user-speciefied value. 
so if output type is fully specified, it won't throw error even if one of the statements is wrong (e.g. outputDouble2Real=inputDouble3Real) as output is not inferred in this case.

DCE: errorOnUnresolvedSymbolsInChart->createEmptyStubsForIntrinsics->
DCE: PropagationManager::errorOnUnresolvedSymbols->constructCoders

