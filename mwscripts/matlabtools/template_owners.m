t = sltemplate.internal.findTemplates;
m = matlabroot;
nm = numel(m);
t = t(strncmp(t,m,nm)); % exclude those not under matlabroot
[d,n,e] = slfileparts(t);
sources = slfullfile(d,'internal',strcat(n,'.slx')); % source SLX files

found = false(size(sources));
for i=1:numel(sources)
    found(i) = ~isempty(Simulink.loadsave.resolveFile(sources{i}));
end

% Try the "templates" subfolder (e.g. for sldrt).
sources(~found) = slfullfile(d(~found),'templates',strcat(n(~found),'.slx'));
for i=find(~found)'
    found(i) = ~isempty(Simulink.loadsave.resolveFile(sources{i}));
end

% No SLX files found for these templates.  Try XML files instead (for
% model templates generated by MATLAB code).
sources(~found) = slfullfile(d(~found),'internal',strcat(n(~found),'.xml')); % source XML files
for i=find(~found)'
    found(i) = ~isempty(Simulink.loadsave.resolveFile(sources{i}));
end

% No XML files found for these templates.  They may be project templates, so
% look for an XML file in "templatessrc" or "projectsrc", or failing that
% in the same folder a the SLTX file itself.
sources(~found) = slfullfile(d(~found),'templatessrc',strcat(n(~found),'.xml')); % source XML files
for i=find(~found)'
    found(i) = ~isempty(Simulink.loadsave.resolveFile(sources{i}));
end

sources(~found) = slfullfile(d(~found),'projectsrc',strcat(n(~found),'.xml')); % source XML files
for i=find(~found)'
    found(i) = ~isempty(Simulink.loadsave.resolveFile(sources{i}));
end

sources(~found) = slfullfile(d(~found),strcat(n(~found),'.xml')); % source XML files
for i=find(~found)'
    found(i) = ~isempty(Simulink.loadsave.resolveFile(sources{i}));
end



if any(~found)
    missing = t(~found);
    fprintf('No source found: %s\n',missing{:});
end

sources(~found) = t(~found);

info = sbfi(sources);

titles = cell(size(t));
groups = cell(size(t));
ids = cell(size(t)); % for sorting
for i=1:numel(t)
    ti = sltemplate.TemplateInfo(t{i});
    titles{i} = ti.Title;
    groups{i} = ti.Group;
    ids{i} = sprintf('%s %.2d',ti.Group,i);
    if strcmp(ti.Group,'Simulink')
        ids{i} = ['AAAAA' ids{i}]; % Simulink first
    end
end

% Sort by group
[~,order] = sort(ids);
t = t(order);
info = info(order);
groups = groups(order);
titles = titles(order);

f = fopen('template_owner_report.html','wt');
closefile = onCleanup(@() fclose(f));

fprintf(f,'<html>\n<head>\n<title>Template Owners</title>\n');

fprintf(f,'<style>table { font-family: arial, sans-serif;  border-collapse: collapse;  width: 100%%; }\n');
fprintf(f,'td, th { border: 1px solid #dddddd; text-align: left;  padding: 8px; }\n');
fprintf(f,'tr:nth-child(even) {  background-color: #dddddd; } </style>\n');

fprintf(f,'</head>\n</body>\n');
fprintf(f,'<table border="1">\n');

fprintf(f,'<tr> <th></th> <th>Template Title</th> <th>Owner</th> <th>Gecko Component</th> <th>Template File</th> <th>BaT Component</th> </tr>\n');

for i=1:numel(t)
    tf = t{i};
    tf(1:numel(matlabroot)+1) = [];
    fprintf(f,'<tr> <td>%d</td> <td>%s (%s)</td> <td>%s</td> <td>%s</td> <td>%s</td> <td>%s</td> </tr>\n',...
        i,...
        titles{i},...
        groups{i},...
        info(i).Owner,...
        info(i).GeckoComponentAndSubcomponent,...
        tf,...
        info(i).Component);
end

fprintf(f,'</table>\n');
fprintf(f,'</body></html>\n');

delete(closefile);

web('template_owner_report.html');
