# -*-shell-script-*-

# For information and guidelines on what should and should NOT go  
# in here, please read sbsetupunix help:
#   http://inside.mathworks.com/wiki/SBTools#sbsetupunix
# In particular pay attention to the 'Typical Mistakes' that can cause
# significant pain to the company.
# You should also time your changes as explained in sbsetupunix help.


# Enable DEFAULT_SANDBOX to set a default sandbox for tools like sbm when not
# run from within a sandbox.
#export DEFAULT_SANDBOX=/mathworks/devel/sandbox/$LOGNAME/b
unset PYTHONPATH
. /mathworks/hub/share/sbtools/bash_setup.bash
unset LD_LIBRARY_PATH
source /mathworks/hub/share/sbtools/bash_setup.bash

export PATH=$PATH:/sandbox/savadhan/sbtools
source /mathworks/inside/labs/dev/matlab_coder_tools/sbtools-completions/sbtools-completions/bash/setup.bash

source /sandbox/savadhan/sbtools/_bash_functions
export SBTOOLS_VNC_WINDOW_MGR=mate-session
export P4CONFIG=.perforce
export P4MERGE=p4merge












################
# My own macros
################
export ZFS_MASTER_SB="Bstateflow"
export SILENT=1
export LOCATION=AH
export BUILD_SRC_SIMULINK=1
alias q0='gvim /mathworks/devel/sandbox/ppatil/misc/configurations/qualify.bash';
alias q1='gvim /mathworks/devel/sandbox/ppatil/misc/configurations/qualify1.bash';
alias q2='gvim /mathworks/devel/sandbox/ppatil/misc/configurations/qualify2.bash';
alias q3='gvim /mathworks/devel/sandbox/ppatil/misc/configurations/qualify3.bash';
alias q4='gvim /mathworks/devel/sandbox/ppatil/misc/configurations/qualify4.bash';
alias sfmlt='go root;cd test/toolbox/stateflow/sf_in_matlab';
alias sfmltt='go root;cd test/tools/sf4ml/+SF4MLTest';
alias sfml='go root; cd toolbox/stateflow/stateflow/+Stateflow/+App';
alias sfmls='go root; cd toolbox/shared/stateflow/';
alias sbr="sb -r 'sf_car;bdclose all;startup;' &> /tmp/matlab.log &";        
alias sba="go root; cd toolbox/matlab/appdesigner/web/application";        
alias egit="gvim $s/misc/githubroot/documents/dailyLog.tex";
alias lcpp="cd $s/misc/ContinuousLearning/cpp; gvim exe1/exe1f1.cpp";
alias ljs="cd $s/misc/ContinuousLearning/js; gvim main1.cpp";
alias lpy="cd $s/misc/ContinuousLearning/py; gvim main1.cpp";
alias lalgo="cd $s/misc/ContinuousLearning/algo; gvim main1.cpp";
alias lc="cd $s/misc/ContinuousLearning/c; gvim main1.cpp";
alias lasm="cd $s/misc/ContinuousLearning/asm; gvim main1.cpp";
alias lclang="cd $s/misc/ContinuousLearning/clang; gvim main1.cpp";
alias lds="cd $s/misc/ContinuousLearning/distributedsystems; gvim main1.cpp";
alias newSession="cd ~;rm -rf logs log matlab_crash_dump* orig.matlab_crash_dump*;cd $s; pkill -9 -f matlab;sbstop 8 0;pkill -9 -f chrome;pkill -9 -f p4v;pkill -9 -f gvim;google-chrome &> /tmp/chrome.log & "
alias newSession1="cd ~;rm -rf logs log matlab_crash_dump* orig.matlab_crash_dump*;cd $s; pkill -9 -f matlab;sbstop 8 0;pkill -9 -f p4v;pkill -9 -f gvim & "
streamName=''
function getStreamName() {
    
    sbverOutput=$(sbver);
    isStreamTag="0";
    IFS=' ' 
    for token in $sbverOutput
    do
        if [[ $isStreamTag == "1" ]];
        then
            streamName=$token
            isStreamTag="0";
        fi
        if [[ $token == Stream:* ]];
        then
            isStreamTag="1";
        fi
    done
    streamName=$(echo "$streamName"|tr '\n' ' ')
    streamName="${streamName/Version: //}"
    streamName="${streamName/ /}"
}
function p4o() {
    getStreamName
    fileNames=''
    p4opened=$(p4 opened);
    IFS=')' 
    for token1 in $p4opened; 
    do 
        if [[ $token1 == *//mw/* ]]
        then
            IFS='#' fileTokens=( $token1 );
            for token2 in $fileTokens; 
            do
                fileName="${token2/$streamName/ }"
                fileNames="$fileNames $fileName"
            done
        fi
    done
    fileNames=$(echo "$fileNames"|tr '\n' ' ')
    editCommand="gvim $fileNames"
    echo $editCommand
    go root;cd ..
    eval $editCommand

}
function g() {
    grep "$@" -iIrn --color=always --exclude=*tags
}
#export PATH=$PATH:/sandbox/dandrade/tools/
export PATH=$PATH:/home/ppatil/Downloads/node1/bin:~/Downloads/node1/lib:~/Downloads/node1/include:~/Downloads/node1/share
function gs1 {
a="gvim +/\"$1\" $(grep -irl $1 $2 $3 $4 $5 --exclude=*swp --exclude=*swo --exclude=*tags .)";
b=$(echo $a|tr '\n' ' ');
eval $b
}
function gs2 {
    e="\($1.*$2\|$2.*$1\)";
    d="grep -irPl '(?=.*$1)(?=.*$2)' $3 $4 $5 --exclude=*tags --exclude=*swo --exclude=*swp .";
    echo $d
    a="gvim +/\"$e\" $(eval $d)"
    echo $a
    b=$(echo $a|tr '\n' ' ');
    eval $b
}
function gs3 {
a="gvim $(grep -irl $1 $2 $3  --exclude=*tags .)";
b=$(echo $a|tr '\n' ' ');
eval $b
}
function gs4 {
a="gvim +/$1 $(grep -irl $1 --exclude=*tags .)";eval $a
}

